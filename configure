#!/usr/bin/env python

# Configure script for LAIK:
# - tests for required/wanted packages
# - generates a Makefile.config

import os
import subprocess
import distutils.spawn

defs = ""
cc = ""
subdirs = "examples"
test_subdirs = ""
ipath = "/usr/include"

# if compiler is specified via CC for configure, use it
if "CC" in os.environ:
    cc = os.environ['CC']

#------------------------------------
# Mosquitto/MQTT

#  check for mosquitto header
mosq_found = os.path.isfile(ipath + "/mosquitto.h")
#  check for protobuf header
protobuf_found = os.path.isfile(ipath + "/protobuf-c/protobuf-c.h")
if not protobuf_found:
    # on precise/trusty header is in /usr/include/google
    protobuf_found = os.path.isfile(ipath + "/google/protobuf-c/protobuf-c.h")
    if protobuf_found:
        defs += " -I/usr/include/google"
#  check for protobuf compiler
protoc_found = distutils.spawn.find_executable("protoc-c")
#  check for UUID header
uuid_found = os.path.isfile(ipath + "/uuid/uuid.h")

mqtt_enabled = mosq_found and protobuf_found and protoc_found and uuid_found
if mqtt_enabled:
    print("Mosquitto/Protobuf/UUID found. MQTT enabled.")
    defs += " -DUSE_MQTT"
    subdirs += " external/MQTT"
else:
    print("MQTT support disabled:")
    if not mosq_found:
        print(" Mosquitto include file not found.")
        print("  On Ubuntu, install 'libmosquitto-dev' or 'libmosquitto0-dev' (trusty).")
    if not protobuf_found:
        print(" Protobuf C include file not found.")
        print("  On Ubuntu, install 'libprotobuf-c-dev' or 'libprotobuf-c0-dev' (trusty).")
    if not protoc_found:
        print(" Protobuf compiler not found.")
        print("  On Ubuntu, install 'protobuf-c-compiler'")
    if not uuid_found:
        print(" UUID header file not found.")
        print("  On Ubuntu, install 'uuid-dev'")


#------------------------------------
# LAIK-internal MPI support

# header may be in different directory. If found, we expect mpicc
# to do the right thing
mpi_found = os.path.isfile(ipath + "/mpi.h")
mpi_ipath = ipath
if not mpi_found:
    mpi_found = os.path.isfile(ipath + "/mpi/mpi.h")
    mpi_ipath = ipath + "/mpi"

if not mpi_found:
    print("MPI not found. LAIK MPI backend disabled.")
    print("  On Ubuntu, install 'libopenmpi-dev'.")
else:
    print("MPI header found (in '" + mpi_ipath +
          "'). MPI enabled, using 'mpicc'.")
    defs += " -DUSE_MPI"
    cc = "mpicc"
    test_subdirs += " mpi"


#------------------------------------
# OpenMP (only used in examples)

omp_enabled = False
mycc = cc;
if not cc:
    mycc = "cc"
ccout = subprocess.check_output([mycc, '--version'])
if ccout[:3] == "gcc":
    omp_enabled = True
if omp_enabled:
    print("Enabling OpenMP in examples");

# write Makefile.config, will be included by Makefile
cfile = open("Makefile.config", 'w')
cfile.write("# Generated by configure\n")
cfile.write("DEFS=" + defs + "\n")
cfile.write("SUBDIRS=" + subdirs + "\n")
cfile.write("TEST_SUBDIRS=" + test_subdirs + "\n")
if cc:
    cfile.write("CC=" + cc + "\n")
if omp_enabled:
    cfile.write("OMP_FLAGS=-fopenmp")
if "PREFIX" in os.environ:
    cfile.write("PREFIX=" + os.path.abspath(os.environ['PREFIX']) + "\n")
cfile.close()

print("Generated 'Makefile.config'")
